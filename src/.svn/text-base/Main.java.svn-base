import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map.Entry;

import com.szu.model.DynamicVehicle;
import com.szu.model.Order;
import com.szu.model.ResultOrder;
import com.szu.model.ServiceData;
import com.szu.model.SortNode;
import com.szu.util.CSVFileUtil;
import com.szu.util.Rule;

public class Main {

	public static void main(String[] args) {
		// 515767 419295 422537 753
		test();
		// 为最小堆
	}

	private static void getSortLibData() {
		ServiceData.loadData();
		List<SortNode> list = ServiceData.sortLibMap.get("B2071");
		for (SortNode sortNode : list) {
			System.out.println(sortNode.dist);
			for (String string : sortNode.staticOderNameList) {
				Order order = ServiceData.OrderPackageMaps.get(string);
				System.out.print(string + "  " + order.num + "  ");
			}
			System.out.println();
		}
	}

	public static void test() {
		ServiceData.loadData();
		int total = 0;
		DynamicVehicle dynamicVehicle = new DynamicVehicle();
		List<List<ResultOrder>> depotLists, o2oLists, resultLists;
		List<List<ResultOrder>> results = new ArrayList<>();
		int i = 1;
		for (Entry<String, List<Order>> entry : ServiceData.depotMaps
				.entrySet()) {
			String key = entry.getKey();
			System.out.print(i + ".begin:" + key + "  "
					+ entry.getValue().get(0).dest_id);
			i++;
			List<Order> o2oList = new ArrayList<>();
			o2oList.addAll(ServiceData.o2oOrderMaps.get(key));
			List<Order> depotsList = new ArrayList<>();
			depotsList.addAll(entry.getValue());

			// o2oLists = dynamicVehicle.mergeO2oOrdersWithDepot(o2oLists,
			// depotsList);
			depotLists = dynamicVehicle.dealDepot(depotsList);
			o2oLists = dynamicVehicle.dealingO2oOrder(o2oList);
			System.out.println("  depot Size:" + total);
			resultLists = dynamicVehicle
					.mergeResultOrders(depotLists, o2oLists);
			results.addAll(resultLists);
		}
		int fitting = 0;
		int time = 0;
		for (List<ResultOrder> list : results) {
			ResultOrder depotOrder = list.get(0).clone();
			fitting += Rule.calFitting(list, depotOrder,
					list.get(0).Arrival_time);
			time += list.get(list.size() - 1).Departure;
		}
		// if (results.size() < 1000)
		CSVFileUtil.writeResult("result", results);
		System.out.println(fitting + "  " + time + "  " + results.size());
	}

	public static Object readObject() {
		Object object = null;
		try {
			FileInputStream in = new FileInputStream("result.txt");
			ObjectInputStream inputStream = new ObjectInputStream(in);
			object = inputStream.readObject();
			inputStream.close();
			in.close();
		} catch (Exception e) {
			// e.printStackTrace();
		}
		return object;
	}

	public static void writeObject(Object object) {

		try {
			FileOutputStream out = new FileOutputStream("result.txt");
			ObjectOutputStream outputStream = new ObjectOutputStream(out);
			outputStream.writeObject(object);
			outputStream.close();
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
